#ifndef CHECK_COMMIT_SCRIPT_H
#define CHECK_COMMIT_SCRIPT_H

static const char check_commit_script_content[] =
    "#!/bin/bash\n"
    "\n"
    "sshlirp_source_dir=$1\n"
    "sshlirp_repo_url=$2\n"
    "libslirp_source_dir=$3\n"
    "libslirp_repo_url=$4\n"
    "logfile=$5\n"
    "\n"
    "# Controllo che i parametri siano stati passati\n"
    "if [ -z \"$sshlirp_source_dir\" ] || [ -z \"$sshlirp_repo_url\" ] || [ -z \"$libslirp_source_dir\" ] || [ -z \"$libslirp_repo_url\" ] || [ -z \"$logfile\" ]; then\n"
    "    echo \"From checkCommit.sh: Usage: $0 <sshlirp_source_dir> <sshlirp_repo_url> <libslirp_source_dir> <libslirp_repo_url> <logfile>\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Controllo che il path di clonaggio sia valido\n"
    "if [ ! -d \"$sshlirp_source_dir\" ]; then\n"
    "    echo \"From checkCommit.sh: Error: Invalid input. Please provide a valid directory: $sshlirp_source_dir\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Controllo che il file di log esista\n"
    "if [ ! -f \"$logfile\" ]; then\n"
    "    echo \"From checkCommit.sh: Error: Logfile does not exist: $logfile\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Reindirizzo gli output dei comandi e gli echo nel file di log\n"
    "exec >> \"$logfile\" 2>&1\n"
    "echo \"From checkCommit.sh: Checking for updates in $sshlirp_source_dir...\"\n"
    "\n"
    "# Verifico se la directory Ã¨ un repository Git\n"
    "if [ ! -d \"$sshlirp_source_dir/.git\" ]; then\n"
    "    echo \"From checkCommit.sh: Error: $sshlirp_source_dir is not a valid Git repository.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Mi sposto nella directory del repository\n"
    "cd \"$sshlirp_source_dir\"\n"
    "if [ $? -ne 0 ]; then\n"
    "    echo \"From checkCommit.sh: Error: Failed to change directory to $sshlirp_source_dir.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Ottengo l'hash del commit corrente prima del pull\n"
    "echo \"From checkCommit.sh: Getting current commit hash before pull...\"\n"
    "before_pull_hash=$(git rev-parse HEAD)\n"
    "if [ $? -ne 0 ]; then\n"
    "    echo \"From checkCommit.sh: Error: Failed to get current commit hash before pull.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Effettuo il pull\n"
    "echo \"From checkCommit.sh: Performing git pull...\"\n"
    "git_pull_output=$(git pull 2>&1)\n"
    "pull_status=$?\n"
    "\n"
    "if [ $pull_status -ne 0 ]; then\n"
    "    echo \"From checkCommit.sh: Error: 'git pull' failed with status $pull_status.\"\n"
    "    echo \"Output from git pull: $git_pull_output\"\n"
    "    exit 1 # Errore durante il pull\n"
    "fi\n"
    "echo \"From checkCommit.sh: 'git pull' completed.\"\n"
    "echo \"Output from git pull: $git_pull_output\"\n"
    "\n"
    "\n"
    "# Ottengo l'hash del commit corrente dopo il pull\n"
    "echo \"From checkCommit.sh: Getting current commit hash after pull...\"\n"
    "after_pull_hash=$(git rev-parse HEAD)\n"
    "if [ $? -ne 0 ]; then\n"
    "    echo \"From checkCommit.sh: Error: Failed to get current commit hash after pull.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Confronto gli hash\n"
    "if [ \"$before_pull_hash\" != \"$after_pull_hash\" ]; then\n"
    "    echo \"From checkCommit.sh: Updates found.\"\n"
    "\n"
    "    # Effettuo il pull anche di libslirp per garantire che sia aggiornato\n"
    "    echo \"From checkCommit.sh: Updating libslirp...\"\n"
    "    \n"
    "    # Controllo che la directory di libslirp sia valida\n"
    "    if [ ! -d \"$libslirp_source_dir\" ]; then\n"
    "        echo \"From checkCommit.sh: Error: Invalid input. Please provide a valid directory for libslirp: $libslirp_source_dir\"\n"
    "        exit 1\n"
    "    fi\n"
    "\n"
    "    # Mi sposto nella directory di libslirp\n"
    "    cd \"$libslirp_source_dir\"\n"
    "    if [ $? -ne 0 ]; then\n"
    "        echo \"From checkCommit.sh: Error: Failed to change directory to $libslirp_source_dir.\"\n"
    "        exit 1\n"
    "    fi\n"
    "\n"
    "    # Effettuo direttamente il pull di libslirp\n"
    "    git_pull_output=$(git pull 2>&1)\n"
    "    pull_status=$?\n"
    "    if [ $pull_status -ne 0 ]; then\n"
    "        echo \"From checkCommit.sh: Error: 'git pull' for libslirp failed with status $pull_status.\"\n"
    "        echo \"Output from git pull for libslirp: $git_pull_output\"\n"
    "        exit 1 # Errore durante il pull di libslirp\n"
    "    fi\n"
    "    echo \"From checkCommit.sh: 'git pull' for libslirp completed.\"\n"
    "    echo \"Output from git pull for libslirp: $git_pull_output\"\n"
    "    \n"
    "    exit 2 # Nuovo commit/aggiornamento scaricato\n"
    "else\n"
    "    echo \"From checkCommit.sh: Repository is already up to date.\"\n"
    "    exit 0 # Nessun nuovo commit\n"
    "fi\n";

#endif
