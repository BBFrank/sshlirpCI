#ifndef CHECK_COMMIT_SCRIPT_H
#define CHECK_COMMIT_SCRIPT_H

static const char check_commit_script_content[] =
    "#!/bin/bash\n"
    "\n"
    "sshlirp_source_dir=$1\n"
    "sshlirp_repo_url=$2\n"
    "libslirp_source_dir=$3\n"
    "libslirp_repo_url=$4\n"
    "logfile=$5\n"
    "versioning_file=$6\n"
    "\n"
    "# Check if parameters were passed\n"
    "if [ -z \"$sshlirp_source_dir\" ] || [ -z \"$sshlirp_repo_url\" ] || [ -z \"$libslirp_source_dir\" ] || [ -z \"$libslirp_repo_url\" ] || [ -z \"$logfile\" ] || [ -z \"$versioning_file\" ]; then\n"
        "echo \"From checkCommit.sh: Usage: $0 <sshlirp_source_dir> <sshlirp_repo_url> <libslirp_source_dir> <libslirp_repo_url> <logfile> <versioning_file>\"\n"
        "exit 1\n"
    "fi\n"
    "\n"
    "# Check that the cloning path is valid\n"
    "if [ ! -d $sshlirp_source_dir ]; then\n"
        "echo \"Error: From checkCommit.sh: Invalid input. Please provide a valid directory: $sshlirp_source_dir\"\n"
        "exit 1\n"
    "fi\n"
    "\n"
    "# Check that the log file exists\n"
    "if [ ! -f $logfile ]; then\n"
        "echo \"Error: From checkCommit.sh: Logfile does not exist: $logfile\"\n"
        "exit 1\n"
    "fi\n"
    "\n"
    "# Redirect command outputs and echoes to the log file\n"
    "exec >> $logfile 2>&1\n"
    "echo \"From checkCommit.sh: Checking for updates in $sshlirp_source_dir...\"\n"
    "\n"
    "# Check that the versioning file exists\n"
    "if [ ! -f $versioning_file ]; then\n"
        "echo \"Error: From checkCommit.sh: Versioning file does not exist: $versioning_file\"\n"
        "exit 1\n"
    "fi\n"
    "\n"
    "# Check if the directory is a Git repository\n"
    "if [ ! -d \"$sshlirp_source_dir/.git\" ]; then\n"
        "echo \"Error: From checkCommit.sh: $sshlirp_source_dir is not a valid Git repository.\"\n"
        "exit 1\n"
    "fi\n"
    "\n"
    "# Move to the repository directory\n"
    "cd $sshlirp_source_dir\n"
    "if [ $? -ne 0 ]; then\n"
        "echo \"Error: From checkCommit.sh: Failed to change directory to $sshlirp_source_dir.\"\n"
        "exit 1\n"
    "fi\n"
    "\n"
    "# Get the current commit hash before pull\n"
    "echo \"From checkCommit.sh: Getting current commit hash before pull...\"\n"
    "before_pull_hash=$(git rev-parse HEAD)\n"
    "if [ $? -ne 0 ]; then\n"
        "echo \"Error: From checkCommit.sh: Failed to get current commit hash before pull.\"\n"
        "exit 1\n"
    "fi\n"
    "\n"
    "# Get the last tag that pointed to a commit I have already downloaded (last tag before pull)\n"
    "echo \"From checkCommit.sh: Getting current tag...\"\n"
    "current_tag=$(git describe --tags --abbrev=0)\n"
    "if [ $? -ne 0 ]; then\n"
        "echo \"From checkCommit.sh: No tags found in the local repository.\"\n"
    "else\n"
        "echo \"From checkCommit.sh: Current tag is $current_tag.\"\n"
    "fi\n"
    "\n"
    "# Perform the pull\n"
    "echo \"From checkCommit.sh: Performing git pull...\"\n"
    "git_pull_output=$(git pull 2>&1)\n"
    "pull_status=$?\n"
    "\n"
    "if [ $pull_status -ne 0 ]; then\n"
        "echo \"Error: From checkCommit.sh: 'git pull' failed with status $pull_status.\"\n"
        "echo \"Output from git pull: $git_pull_output\"\n"
        "exit 1\n"
    "fi\n"
    "echo \"From checkCommit.sh: 'git pull' completed.\"\n"
    "\n"
    "# Get the current commit hash after pull\n"
    "echo \"From checkCommit.sh: Getting current commit hash after pull...\"\n"
    "after_pull_hash=$(git rev-parse HEAD)\n"
    "if [ $? -ne 0 ]; then\n"
        "echo \"Error: From checkCommit.sh: Failed to get current commit hash after pull.\"\n"
        "exit 1\n"
    "fi\n"
    "\n"
    "# Get the last tag after pull\n"
    "echo \"From checkCommit.sh: Getting current tag after pull...\"\n"
    "current_tag_after_pull=$(git describe --tags --abbrev=0)\n"
    "if [ $? -ne 0 ]; then\n"
        "echo \"From checkCommit.sh: No new tag found after pull.\"\n"
    "else\n"
        "echo \"From checkCommit.sh: Current tag after pull is $current_tag_after_pull.\"\n"
    "fi\n"
    "\n"
    "# Compare hashes (to see if there have been updates)\n"
    "if [ \"$before_pull_hash\" != \"$after_pull_hash\" ]; then\n"
        "echo \"From checkCommit.sh: Updates found.\"\n"
        "\n"
        "# If I also have a new tag (tag different from current and not empty), I insert it into the versioning file\n"
        "if [ \"$current_tag_after_pull\" != \"$current_tag\" ] && [ -n \"$current_tag_after_pull\" ]; then\n"
            "echo \"From checkCommit.sh: Updating versioning file.\"\n"
            "echo \"$current_tag_after_pull\" >> $versioning_file\n"
        "fi\n"
        "\n"
        "# Also pull libslirp to ensure it is updated\n"
        "echo \"From checkCommit.sh: Updating libslirp...\"\n"
        "\n"
        "# Check that the libslirp directory is valid\n"
        "if [ ! -d $libslirp_source_dir ]; then\n"
            "echo \"Error: From checkCommit.sh: Invalid input. Please provide a valid directory for libslirp: $libslirp_source_dir\"\n"
            "exit 1\n"
        "fi\n"
        "\n"
        "# Move to the libslirp directory\n"
        "cd $libslirp_source_dir\n"
        "if [ $? -ne 0 ]; then\n"
            "echo \"Error: From checkCommit.sh: Failed to change directory to $libslirp_source_dir.\"\n"
            "exit 1\n"
        "fi\n"
        "\n"
        "# Directly pull libslirp\n"
        "git_pull_output=$(git pull 2>&1)\n"
        "pull_status=$?\n"
        "if [ $pull_status -ne 0 ]; then\n"
            "echo \"Error: From checkCommit.sh: 'git pull' for libslirp failed with status $pull_status.\"\n"
            "echo \"Output from git pull: $git_pull_output\"\n"
            "exit 1 # Error during libslirp pull\n"
        "fi\n"
        "echo \"From checkCommit.sh: 'git pull' for libslirp completed.\"\n"
        "\n"
        "exit 2 # New commit/update downloaded\n"
    "else\n"
        "echo \"From checkCommit.sh: Repository is already up to date.\"\n"
        "exit 0 # No new commit\n"
    "fi\n";
#endif
