#ifndef COMPILE_SCRIPT_H
#define COMPILE_SCRIPT_H

static const char compile_script_content[] =
    "#!/bin/bash\n"
    "\n"
    "chroot_path=$1\n"
    "sshlirp_chroot_src_dir=$2\n"
    "libslirp_chroot_src_dir=$3\n"
    "target_chroot_dir=$4\n"
    "arch=$5\n"
    "chroot_logfile=$6\n"
    "\n"
    "# Controllo che i parametri siano stati passati\n"
    "if [ -z \"$chroot_path\" ] || [ -z \"$sshlirp_chroot_src_dir\" ] || [ -z \"$libslirp_chroot_src_dir\" ] || [ -z \"$target_chroot_dir\" ] || [ -z \"$arch\" ] || [ -z \"$chroot_logfile\" ]; then\n"
    "    echo \"From compile.sh: Usage: $0 <chroot_path> <sshlirp_chroot_src_dir> <libslirp_chroot_src_dir> <target_chroot_dir> <arch> <chroot_logfile>\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Ottengo il path assoluto del chroot log file (mi serve solo per il primo eventuale log)\n"
    "abs_chroot_log_file_path=\"$chroot_path$chroot_logfile\"\n"
    "\n"
    "# Controllo che il file di log esista\n"
    "if [ ! -f \"$abs_chroot_log_file_path\" ]; then\n"
    "    echo \"Error: From compile.sh: Logfile does not exist: $abs_chroot_log_file_path\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Reindirizzo gli output dei comandi e gli echo nel file di log (questa volta è il file di log interno al chroot)\n"
    "exec >> \"$abs_chroot_log_file_path\" 2>&1\n"
    "\n"
    "# Controllo che il chroot esista\n"
    "if [ ! -d \"$chroot_path\" ]; then\n"
    "    echo \"Error: From compile.sh: Chroot path $chroot_path does not exist.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Entro nel chroot avviando una shell che prende in input il codice dell'here document (EOF...EOF)\n"
    "# Nota: è necessario fare ciò in quanto il comportamento di default di chroot è di aprire una shell interattiva, e basta ->\n"
    "# il processo padre quindi attenderebbe indefinitamente la chiusura della shell, che non avverrebbe mai, in quanto i comandi specificati\n"
    "# dopo il chroot sono da eseguire nell'host.\n"
    "# In questo modo invece è come se si desse in input alla shell del chroot un comando da eseguire.\n"
    "# Nota: questa non è la soluzione più elegante perchè comunque viene passato uno script grande e complesso come linea di comando alla nuova shell...\n"
    "# L'ideale sarebbe creare uno script di shell separato e passarlo come argomento a chroot...\n"
    "sudo chroot \"$chroot_path\" /bin/bash <<EOF\n"
    "\n"
    "# Controlla se la directory in cui metterò i binari nel chroot esiste\n"
    "if [ ! -d \"$target_chroot_dir\" ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Target chroot directory $target_chroot_dir does not exist in $arch chroot.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Installo le dipendenze necessarie per la compilazione\n"
    "echo \"From compile.sh (inside chroot): Installing build dependencies...\"\n"
    "apt-get update\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to update package list.\"\n"
    "    exit 1\n"
    "fi\n"
    "apt install -y build-essential git devscripts debhelper dh-exec \\\\\n"
    "            libglib2.0-dev pkg-config \\\\\n"
    "            gcc g++ libcap-ng-dev libseccomp-dev \\\\\n"
    "	        cmake git-buildpackage meson ninja-build \\\\\n"
    "	        libvdeplug-dev libvdeslirp-dev\n"
    "\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to install build dependencies.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Mi sposto nella directory di libslirp source dentro il chroot\n"
    "cd \"$libslirp_chroot_src_dir\"\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to change directory to $libslirp_chroot_src_dir.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Compilo libslirp\n"
    "echo \"From compile.sh (inside chroot): Compiling libslirp...\"\n"
    "meson setup build --default-library=static\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to set up meson build for libslirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "ninja -C build\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to build libslirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "ninja -C build install\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to install libslirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "rm -rf build\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to remove build directory for libslirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "echo \"From compile.sh (inside chroot): libslirp compiled and installed successfully.\"\n"
    "\n"
    "# Mi sposto nella directory di sshlirp source dentro il chroot\n"
    "cd \"$sshlirp_chroot_src_dir\"\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to change directory to $sshlirp_chroot_src_dir.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Compilo sshlirp\n"
    "echo \"From compile.sh (inside chroot): Compiling sshlirp...\"\n"
    "\n"
    "# Se sono su trixie devo prima modificare il CMakeLists.txt per correggere l'importazione dei simboli\n"
    "# di sysprof (aggiungere fake.c - se esistente nella directory di sshlirp source - nell'add_executable(sshlirp sshlirp.c libvdeslirp.c libvdestream.c autoopt.c),\n"
    "# che quindi deve diventare: add_executable(sshlirp sshlirp.c libvdeslirp.c libvdestream.c autoopt.c fake.c)\n"
    "if [ \"$arch\" != \"arm64\" ]; then\n"
    "    echo \"From compile.sh (inside chroot): Modifying CMakeLists.txt for trixie release...\"\n"
    "    # Controllo se fake.c esiste\n"
    "    if [ -f \"fake.c\" ]; then\n"
    "        echo \"From compile.sh (inside chroot): fake.c found, modifying CMakeLists.txt...\"\n"
    "        sed -i 's/add_executable(sshlirp sshlirp.c libvdeslirp.c libvdestream.c autoopt.c)/add_executable(sshlirp sshlirp.c libvdeslirp.c libvdestream.c autoopt.c fake.c)/' CMakeLists.txt\n"
    "        if [ \\$? -ne 0 ]; then\n"
    "            echo \"Error: From compile.sh (inside chroot): Failed to modify CMakeLists.txt.\"\n"
    "            exit 1\n"
    "        fi\n"
    "    else\n"
    "        echo \"Warning: From compile.sh (inside chroot): fake.c not found, skipping modification of CMakeLists.txt.\"\n"
    "    fi\n"
    "fi\n"
    "\n"
    "# Creo la directory di build e mi sposto in essa\n"
    "mkdir -p build\n"
    "cd build\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to create and change directory to build.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Configuro il progetto con CMake\n"
    "cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\"$target_chroot_dir\" -DCMAKE_EXE_LINKER_FLAGS=\"-static\"\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to configure CMake for sshlirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Compilo il progetto\n"
    "make\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to build sshlirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Installo il progetto\n"
    "make install\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to install sshlirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Rimuovo la directory di build\n"
    "cd ..\n"
    "rm -rf build\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to remove build directory for sshlirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Verifico che il binario sia stato installato correttamente e che sia un eseguibile statico. Infine lo\n"
    "# rinomino come sshlirp-<arch>\n"
    "if [ ! -f \"$target_chroot_dir/bin/sshlirp\" ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Expected binary sshlirp not found in $target_chroot_dir/bin.\"\n"
    "    exit 1\n"
    "fi\n"
    "if ! file \"$target_chroot_dir/bin/sshlirp\" | grep -q \"statically linked\"; then\n"
    "    echo \"Error: From compile.sh (inside chroot): $target_chroot_dir/bin/sshlirp is not a statically linked executable.\"\n"
    "    exit 1\n"
    "fi\n"
    "mv \"$target_chroot_dir/bin/sshlirp\" \"$target_chroot_dir/bin/sshlirp-$arch\"\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to rename sshlirp binary to sshlirp-$arch.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "echo \"From compile.sh (inside chroot): sshlirp compiled and installed successfully as sshlirp-$arch in $target_chroot_dir/bin.\"\n"
    "exit 0\n"
    "EOF\n"
    "\n"
    "if [ $? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh: Script inside chroot failed.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "echo \"From compile.sh: Compilation process finished successfully.\"\n"
    "exit 0\n";

#endif
