#ifndef COMPILE_SCRIPT_H
#define COMPILE_SCRIPT_H

static const char compile_script_content[] =
    "#!/bin/bash\n"
    "\n"
    "chroot_path=$1\n"
    "sshlirp_chroot_src_dir=$2\n"
    "libslirp_chroot_src_dir=$3\n"
    "target_chroot_dir=$4\n"
    "arch=$5\n"
    "chroot_logfile=$6\n"
    "\n"
    "# Check if parameters were passed\n"
    "if [ -z \"$chroot_path\" ] || [ -z \"$sshlirp_chroot_src_dir\" ] || [ -z \"$libslirp_chroot_src_dir\" ] || [ -z \"$target_chroot_dir\" ] || [ -z \"$arch\" ] || [ -z \"$chroot_logfile\" ]; then\n"
    "    echo \"From compile.sh: Usage: $0 <chroot_path> <sshlirp_chroot_src_dir> <libslirp_chroot_src_dir> <target_chroot_dir> <arch> <chroot_logfile>\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Get the absolute path of the chroot log file (needed only for the first potential log)\n"
    "abs_chroot_log_file_path=\"$chroot_path$chroot_logfile\"\n"
    "\n"
    "# Check that the log file exists\n"
    "if [ ! -f \"$abs_chroot_log_file_path\" ]; then\n"
    "    echo \"Error: From compile.sh: Logfile does not exist: $abs_chroot_log_file_path\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Redirect command outputs and echoes to the log file (this time it's the log file inside the chroot)\n"
    "exec >> \"$abs_chroot_log_file_path\" 2>&1\n"
    "\n"
    "# Check that the chroot exists\n"
    "if [ ! -d \"$chroot_path\" ]; then\n"
    "    echo \"Error: From compile.sh: Chroot path $chroot_path does not exist.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Enter the chroot by starting a shell that takes the here document code as input (EOF...EOF)\n"
    "# Note: this is necessary because the default behavior of chroot is to open an interactive shell, and that's it ->\n"
    "# the parent process would then wait indefinitely for the shell to close, which would never happen, as the commands specified\n"
    "# after chroot are to be executed on the host.\n"
    "# This way, it's as if a command to be executed is given as input to the chroot shell.\n"
    "# Note: this is not the most elegant solution because a large and complex script is still passed as a command line to the new shell...\n"
    "# The ideal would be to create a separate shell script and pass it as an argument to chroot...\n"
    "sudo chroot \"$chroot_path\" /bin/bash <<EOF\n"
    "\n"
    "# Check if the directory where I will put the binaries in the chroot exists\n"
    "if [ ! -d \"$target_chroot_dir\" ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Target chroot directory $target_chroot_dir does not exist in $arch chroot.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Install the dependencies necessary for compilation\n"
    "echo \"From compile.sh (inside chroot): Installing build dependencies...\"\n"
    "apt-get update\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to update package list.\"\n"
    "    exit 1\n"
    "fi\n"
    "apt install -y build-essential git devscripts debhelper dh-exec \\\\\n"
    "            libglib2.0-dev pkg-config \\\\\n"
    "            gcc g++ libcap-ng-dev libseccomp-dev \\\\\n"
    "	        cmake git-buildpackage meson ninja-build \\\\\n"
    "	        libvdeplug-dev libvdeslirp-dev\n"
    "\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to install build dependencies.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Move to the libslirp source directory inside the chroot\n"
    "cd \"$libslirp_chroot_src_dir\"\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to change directory to $libslirp_chroot_src_dir.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Compile libslirp\n"
    "echo \"From compile.sh (inside chroot): Compiling libslirp...\"\n"
    "meson setup build --default-library=static\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to set up meson build for libslirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "ninja -C build\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to build libslirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "ninja -C build install\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to install libslirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "rm -rf build\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to remove build directory for libslirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "echo \"From compile.sh (inside chroot): libslirp compiled and installed successfully.\"\n"
    "\n"
    "# Move to the sshlirp source directory inside the chroot\n"
    "cd \"$sshlirp_chroot_src_dir\"\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to change directory to $sshlirp_chroot_src_dir.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Compile sshlirp\n"
    "echo \"From compile.sh (inside chroot): Compiling sshlirp...\"\n"
    "\n"
    "# Create the build directory and move into it\n"
    "mkdir -p build\n"
    "cd build\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to create and change directory to build.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Configure the project with CMake\n"
    "cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\"$target_chroot_dir\"\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to configure CMake for sshlirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Compile the project\n"
    "make\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to build sshlirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Install the project\n"
    "make install\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to install sshlirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Remove the build directory\n"
    "cd ..\n"
    "rm -rf build\n"
    "if [ \\$? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Failed to remove build directory for sshlirp.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Get the system architecture to know what the binary will be called\n"
    "binary_arch=\\$(uname -m)\n"
    "if [ -z \"\\$binary_arch\" ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Could not determine binary architecture using uname -m.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Verify that the binary was installed correctly and that it is a static executable. Finally, rename it as sshlirp-<arch>\n"
    "if [ ! -f \"$target_chroot_dir/bin/sshlirp-\\$binary_arch\" ]; then\n"
    "    echo \"Error: From compile.sh (inside chroot): Expected binary sshlirp-\\$binary_arch not found in $target_chroot_dir/bin for architecture $arch.\"\n"
    "    exit 1\n"
    "fi\n"
    "if ! file \"$target_chroot_dir/bin/sshlirp-\\$binary_arch\" | grep -q \"statically linked\"; then\n"
    "    echo \"Error: From compile.sh (inside chroot): $target_chroot_dir/bin/sshlirp-\\$binary_arch is not a statically linked executable.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Rename the binary to sshlirp-<arch> only if binary_arch is different from arch\n"
    "if [ \"\\$binary_arch\" != \"$arch\" ]; then\n"
    "    mv \"$target_chroot_dir/bin/sshlirp-\\$binary_arch\" \"$target_chroot_dir/bin/sshlirp-$arch\"\n"
    "    if [ \\$? -ne 0 ]; then\n"
    "        echo \"Error: From compile.sh (inside chroot): Failed to rename sshlirp-\\$binary_arch binary to sshlirp-$arch.\"\n"
    "        exit 1\n"
    "    fi\n"
    "\n"
    "echo \"From compile.sh (inside chroot): sshlirp compiled and installed successfully as sshlirp-$arch in $target_chroot_dir/bin.\"\n"
    "exit 0\n"
    "EOF\n"
    "\n"
    "if [ $? -ne 0 ]; then\n"
    "    echo \"Error: From compile.sh: Script inside chroot failed.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "echo \"From compile.sh: Compilation process finished successfully.\"\n"
    "exit 0\n";

#endif
