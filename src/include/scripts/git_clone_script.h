#ifndef GIT_CLONE_SCRIPT_H
#define GIT_CLONE_SCRIPT_H

static const char git_clone_script_content[] =
    "#!/bin/bash\n"
    "\n"
    "what2clone=$1\n"
    "where2clone=$2\n"
    "logfile=$3\n"
    "versioning_file=$4\n"
    "\n"
    "sshlirp_git_clone=1\n"
    "\n"
    "# Controlla che i parametri siano stati passati\n"
    "if [ -z \"$what2clone\" ] || [ -z \"$where2clone\" ] || [ -z \"$logfile\" ]; then\n"
    "    echo \"From gitClone.sh: Usage: $0 <repository_url> <destination_directory> <logfile>\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Controlla che il file di versioning sia stato passato. Se no sto clonando libslirp, altrimenti sto clonando sshlirp e avrò bisogno di modificare il file di versioning\n"
    "if [ -z \"$versioning_file\" ]; then\n"
    "    sshlirp_git_clone=0\n"
    "fi\n"
    "\n"
    "# Controlla che il file di log esista\n"
    "if [ ! -f $logfile ]; then\n"
    "    echo \"Error: From gitClone.sh: Logfile does not exist.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "# Reindirizza gli output dei comandi e gli echo nel file di log\n"
    "exec >> $logfile 2>&1\n"
    "\n"
    "# Controlla che il path di clonaggio sia valido\n"
    "if [ ! -d $where2clone ]; then\n"
    "    echo \"Error: From gitClone.sh: Invalid input. Please provide a valid directory.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "if [ $sshlirp_git_clone -eq 1 ]; then\n"
    "    # Controllo che il file di versioning esista\n"
    "    if [ ! -f $versioning_file ]; then\n"
    "        echo \"Error: From gitClone.sh (for sshlirp cloning): Versioning file does not exist: $versioning_file\"\n"
    "        exit 1\n"
    "    fi\n"
    "fi\n"
    "\n"
    "# Controlla se nella directory c'è già un repository Git\n"
    "if [ -d \"$where2clone/.git\" ]; then\n"
    "    echo \"From gitClone.sh: Info: $where2clone already contains a Git repository.\"\n"
    "    exit 0 # non ho nulla da clonare\n"
    "fi\n"
    "\n"
    "# Clona il repository\n"
    "echo \"From gitClone.sh: Cloning form $what2clone into $where2clone...\"\n"
    "git clone $what2clone $where2clone\n"
    "if [ $? -ne 0 ]; then\n"
    "    echo \"Error: From gitClone.sh: Failed to clone repository.\"\n"
    "    exit 1\n"
    "fi\n"
    "\n"
    "if [ $sshlirp_git_clone -eq 1 ]; then\n"
    "    # Verifica se c'è un tag e nel caso scrivilo nel file di versioning\n"
    "    cd $where2clone\n"
    "    if [ $? -ne 0 ]; then\n"
    "        echo \"Error: From gitClone.sh (for sshlirp cloning): Failed to change directory to $where2clone.\"\n"
    "        exit 1\n"
    "    fi\n"
    "    current_tag=$(git describe --tags --abbrev=0)\n"
    "\n"
    "    if [ -n \"$current_tag\" ]; then\n"
    "        echo \"From gitClone.sh (for sshlirp cloning): Found current tag: $current_tag\"\n"
    "        echo \"From gitClone.sh (for sshlirp cloning): Writing current tag to versioning file: $versioning_file\"\n"
    "        echo \"$current_tag\" >> $versioning_file\n"
    "    else\n"
    "        echo \"From gitClone.sh (for sshlirp cloning): No tags found.\"\n"
    "    fi\n"
    "fi\n"
    "\n"
    "echo \"From gitClone.sh: Cloning completed successfully.\"\n"
    "exit 2 # ho effettuato il clone\n";
#endif
